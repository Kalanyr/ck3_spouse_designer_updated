types SpouseDesigner {
	type SD_family_window = widget {
		name = "spouse_designer_family_window"
		visible = "[And(GetVariableSystem.HasValue('spouse_designer_family', 'true' ), LobbyView.GetSelectedPlayable.GetCharacter.IsValid)]"
		position = {-410 0}
		parentanchor = top|right
		widgetanchor = top|right
		size = { 410 70% }
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding


		background = {
			using = Background_Area_Solid
		}

		header_pattern = {
			parentanchor = hcenter
			layoutpolicy_horizontal = expanding
			size = { 100% 5% }
			blockoverride "header_text"
			{
				text = "SPOUSE_DESIGNER_FAMILY"
			}

			blockoverride "button_close"
			{
				onclick = "[GetVariableSystem.Set('spouse_designer_family', 'false')]"
			}
		}
		scrollarea = {
			#margin_top = 55
			layoutpolicy_vertical = growing
			layoutpolicy_horizontal = growing
			name = "spouse_designer_family_scroll"
			size = { 100% 95% }
			#minimumsize = { 100% 100% }
			#maximumsize = { 100% 100% }
			parentanchor = bottom|left
			scrollbarpolicy_horizontal = as_needed
			scrollbarpolicy_vertical = as_needed
			scrollbar_horizontal = {
				using = Scrollbar_Horizontal
			}
			scrollbar_vertical = {
				using = Scrollbar_Vertical
			}
			scrollwidget = {
				vbox = {
					name = "spouse_designer_family_tab"
					state = {
						name = children_list_initialize
						trigger_on_create = no
						trigger_when = "[GetScriptedGui('spouse_designer_make_children_variable_list').IsValid(GuiScope.SetRoot(LobbyView.GetSelectedPlayable.GetCharacter.MakeScope).End)]"
						on_start = "[GetScriptedGui('spouse_designer_make_children_variable_list').Execute(GuiScope.SetRoot(LobbyView.GetSelectedPlayable.GetCharacter.MakeScope).End)]"
					}
					layoutpolicy_horizontal = growing
					layoutpolicy_vertical = growing
					vbox = {
						name = "spouse_designer_family"
						layoutpolicy_horizontal = expanding

						text_label_center = {
							text = "SPOUSE_DESIGNER_PARENTS"
							using = Font_Size_Big
							default_format = "#high"
						}
						hbox = {
							parentanchor = top
							layoutpolicy_horizontal = expanding
							
							vbox = {
								parentanchor = top
								#layoutpolicy_horizontal = expanding
								portrait_head_small = {
									datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetFather]"
								}
								text_single = {
									margin {10 10}
									layoutpolicy_horizontal = expanding
									text = "[LobbyView.GetSelectedPlayable.GetCharacter.GetFather.GetTitledFirstNameNoTooltip]"
									using = Font_Size_Medium
									default_format = "#high"
								}
							}
							vbox = {
								parentanchor = top
								#layoutpolicy_horizontal = expanding
								portrait_head_small = {
									datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetMother]"
								}
								text_single = {
									margin {10 10}
									layoutpolicy_horizontal = expanding
									text = "[LobbyView.GetSelectedPlayable.GetCharacter.GetMother.GetTitledFirstNameNoTooltip]"
									using = Font_Size_Medium
									default_format = "#high"
								}
							}
						}
						hbox = {
							vbox = {
								parentanchor = top
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								portrait_head_small = {
									datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
								}
								text_single = {
									margin = {10 10}
									#layoutpolicy_horizontal = expanding
									text = "[LobbyView.GetSelectedPlayable.GetCharacter.GetTitledFirstNameNoTooltip]"
									using = Font_Size_Medium
									default_format = "#high"
								}
								vbox = {
									#This box prevents the ScriptedGui check on the nested button being run on the Null character when no character is selected. I have not found another way to do this, as it seems that Paradox does not shortcircuit conditionals in the GUI space.
									visible = "[And(Not( IsPreparationLobby ),LobbyView.GetSelectedPlayable.GetCharacter.IsValid)]"
									button_standard = {
										#size = { 380 45 }
										datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"

										visible = "[GetScriptedGui('spouse_designer_visible_for_ruler_designer').IsShown( GuiScope.SetRoot( Character.MakeScope ).End) ]"
										#enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"
										enabled = "[And(GetScriptedGui('spouse_designer_playable').IsValid( GuiScope.SetRoot( Character.MakeScope ).End),Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))) ]"

										onclick = "[GetScriptedGui('spouse_designer_deactivate').Execute( GuiScope.SetRoot( Character.MakeScope ).End)]"
										onclick = "[GetScriptedGui('spouse_designer_add_placeholder_title').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('family_member',Character.MakeScope).End)]"
										onclick = "[TryStartRulerDesigning( Character.Self )]"

										#tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
										tooltip = "[GetScriptedGui('spouse_designer_playable').BuildTooltip( GuiScope.SetRoot( Character.MakeScope ).End) ]"

										text = "RULER_DESIGNER_OPEN"

										#icon = {
										#	#visible = "[And( ShouldPromptForRulerDesigner, LobbyView.CanTryStartRulerDesigning( Character.Self ) )]"
										#	visible = "[And( ShouldPromptForRulerDesigner, And(GetScriptedGui('spouse_designer_playable').IsValid( GuiScope.SetRoot( Character.MakeScope ).End),Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))) )]"
										#	size = { 25% 25% }
										#	texture = "gfx/interface/component_masks/mask_fade_circle.dds"
										#	using = Color_Bright_Yellow
										#	alpha = 0
										#
										#	state = {
										#		name = a
										#		next = b
										#		trigger_on_create = yes
										#		alpha = 0.3
										#		duration = 1
										#		using = Animation_Curve_Default
										#	}

										#	state = {
										#		name = b
										#		next = a
										#		alpha = 0
										#		duration = 2
										#		using = Animation_Curve_Default
										#	}
										#}

										#button_edit_text = {
										#	#size = { 30 30 }
										#	parentanchor = left|vcenter
										#	position = { 10 0 }
										#	alwaystransparent = yes
										#}
									}
								}
							}

							spacer = {
								size = { 5 0 }
							}
							vbox = {
								parentanchor = top
								name = "spouse_designer_spouse_tab"
								visible = [LobbyView.GetSelectedPlayable.GetCharacter.IsValid]
								#layoutpolicy_horizontal = expanding
								#layoutpolicy_vertical = expanding
								#vbox = {
								#margin = {10 10}
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								portrait_head_small = {
									datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPrimarySpouse]"
									#size = { 160 180 }
								}
								text_single = {
										margin = {10 10}
										visible = "[GetScriptedGui('spouse_designer_is_married').IsShown( GuiScope.SetRoot( Character.MakeScope ).End)]"
										text = "[LobbyView.GetSelectedPlayable.GetCharacter.GetPrimarySpouse.GetTitledFirstNameNoTooltip]"
										using = Font_Size_Medium
										default_format = "#high"
								}
								vbox = {
									#layoutpolicy_horizontal = expanding
									#layoutpolicy_vertical = expanding
									hbox = {
										#layoutpolicy_horizontal = expanding
										button_checkbox_label = {
											layoutpolicy_horizontal = expanding
											visible = "[GetScriptedGui('spouse_designer_is_married').IsShown( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End)]"
											enabled = "[And(Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start')),GetScriptedGui('spouse_designer_matrilineal_marriage').IsValid( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End))]"
											datacontext = "[GetScriptedGui('spouse_designer_matrilineal_marriage')]"
											onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End)]"
											tooltip = "SPOUSE_DESIGNER_MATRILINEAR_MARRIAGE_desc"

											blockoverride "checkbox"
											{
												checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End)]"
											}

											blockoverride "text"
											{
												text = "SPOUSE_DESIGNER_MATRILINEAR_MARRIAGE"
											}
										}
									}

									spacer = {
										size = {10 10}
									}
									button_standard = {
										#layoutpolicy_vertical = expanding
										#layoutpolicy_horizontal = expanding
										datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
										enabled = "[Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))]"
										visible = "[And(Not( IsPreparationLobby ),GetScriptedGui('spouse_designer_create_spouse').IsShown( GuiScope.SetRoot( Character.MakeScope ).End))]"
										onclick = "[GetScriptedGui('spouse_designer_create_spouse').Execute( GuiScope.SetRoot( Character.MakeScope ).End)]"
										text = "SPOUSE_DESIGNER_ADD_SPOUSE"
									}
									button_standard = {
										#layoutpolicy_horizontal = expanding
										text = "SPOUSE_DESIGNER_DIVORCE"
										datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
										visible = "[GetScriptedGui('spouse_designer_divorce_spouse').IsShown( GuiScope.SetRoot( Character.MakeScope ).AddScope('spouse',Character.GetPrimarySpouse.MakeScope).End)]"
										enabled = "[And(Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start')),GetScriptedGui('spouse_designer_divorce_spouse').IsValid( GuiScope.SetRoot( Character.MakeScope ).AddScope('spouse',Character.GetPrimarySpouse.MakeScope).End))]"
										onclick = "[GetScriptedGui('spouse_designer_divorce_spouse').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('spouse',Character.GetPrimarySpouse.MakeScope).End)]"
									}
									spacer = {
										size = { 5 5 }
									}
									button_standard = {
										#layoutpolicy_vertical = expanding
										#layoutpolicy_horizontal = expanding
										datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
										visible = "[And(Not( IsPreparationLobby ), GetScriptedGui('spouse_designer_activate').IsShown( GuiScope.SetRoot( Character.MakeScope ).End) )]"
										enabled = "[Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))]"
										onclick = "[GetScriptedGui('spouse_designer_activate').Execute( GuiScope.SetRoot( Character.MakeScope ).End)]"
										onclick = "[GetScriptedGui('spouse_designer_add_placeholder_title').Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope('family_member',Character.GetPrimarySpouse.MakeScope).End)]"
										onclick = "[TryStartRulerDesigning( Character.GetPrimarySpouse.Self )]"
										text = "SPOUSE_DESIGNER_OPEN"
									}
								}
							}
						}
						hbox = {
							text_label_center = {
								text = "SPOUSE_DESIGNER_CHILDREN"
								using = Font_Size_Big
								default_format = "#high"
								#tooltip = "SPOUSE_DESIGNER_CHILDREN_desc"
							}
							spacer = {
								size = { 10 10 }
							}
							
						}

						scrollarea = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							name = "spouse_designer_children"
							#size = { 300 580 }
							minimumsize = { 100 200 }
							#scrollbarpolicy_horizontal = as_needed
							scrollbarpolicy_vertical = always_off
							scrollbar_horizontal = {
								using = Scrollbar_Horizontal
							}

							scrollbar_vertical = {
								using = Scrollbar_Vertical
							}
							scrollwidget = {
								hbox = {
									hbox = {
										name = "spouse_designer_own_house_children"
										#visible = [LobbyView.GetSelectedPlayable.GetCharacter.IsRuler]
										datamodel = "[LobbyView.GetSelectedPlayable.GetCharacter.GetCulture.MakeScope.GetList('children_list')]"
										item = {
											vbox = {
												#layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												#visible = "[Or(ObjectsEqual(Character.GetFather.Self, LobbyView.GetSelectedPlayable.GetCharacter.Self),ObjectsEqual(Character.GetMother.Self, LobbyView.GetSelectedPlayable.GetCharacter.Self))]"
												portrait_head_small = {
													datacontext = "[Scope.GetCharacter]"
													#size = { 160 180 }

												}
												button_tertiary = {
													size = {100 30}
													text = SPOUSE_DESIGNER_EDIT
													visible = "[GetScriptedGui('spouse_designer_children_activate').IsShown( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).AddScope('child',Scope.GetCharacter.MakeScope).End)]"
													enabled = "[And(Scope.GetCharacter.IsAlive,Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start')))]"
													onclick = "[GetScriptedGui('spouse_designer_children_activate').Execute( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).AddScope('child',Scope.GetCharacter.MakeScope).End)]"
													onclick = "[GetScriptedGui('spouse_designer_add_placeholder_title').Execute( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).AddScope('family_member',Scope.GetCharacter.MakeScope).End)]"
													onclick = "[TryStartRulerDesigning( Scope.GetCharacter.Self )]"
												}
												button_tertiary = {
													size = {100 30}
													text = SPOUSE_DESIGNER_REMOVE
													enabled = "[Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))]"
													visible = "[GetScriptedGui('spouse_designer_remove_child').IsShown( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).AddScope('child',Scope.GetCharacter.MakeScope).End)]"
													onclick = "[GetScriptedGui('spouse_designer_remove_child').Execute( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).AddScope('child',Scope.GetCharacter.MakeScope).End)]"
												}
											}
										}
									}
								}
							}
						}
						
						button_round = {
							tooltip = "SPOUSE_DESIGNER_ADD_CHILDREN"
							datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
							visible = "[GetScriptedGui('spouse_designer_create_child').IsShown( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End)]"
							enabled = "[Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))]"
							onclick = "[GetScriptedGui('spouse_designer_create_child').Execute( GuiScope.SetRoot( LobbyView.GetSelectedPlayable.GetCharacter.MakeScope ).End)]"
							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/icons/symbols/icon_plus.dds"
								using = Color_Bright_Yellow
								alpha = 1
							}
						}
					}
				}
			}
		}
	}

	Type SD_button_standard_view_family = button_standard {
		size = { 380 45 }
		text = "SPOUSE_DESIGNER_VIEW_FAMILY"
		onclick = "[GetVariableSystem.Set('spouse_designer_family', 'true')]"
		visible = "[And(And(Or(Not(GetVariableSystem.Exists('spouse_designer_family')), GetVariableSystem.HasValue('spouse_designer_family', 'false' )), LobbyView.GetSelectedPlayable.GetCharacter.IsValid),Not(Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))))]"
	}
}

template SD_button_standard_edit_family {
	text = "SPOUSE_DESIGNER_EDIT_FAMILY"
	onclick = "[GetVariableSystem.Set('spouse_designer_family', 'true')]"
	#onclick = "[GetScriptedGui('spouse_designer_make_children_variable_list').Execute(GuiScope.SetRoot(LobbyView.GetSelectedPlayable.GetCharacter.MakeScope).End)]"
	visible = "[And(And(Or(Not(GetVariableSystem.Exists('spouse_designer_family')), GetVariableSystem.HasValue('spouse_designer_family', 'false' )), LobbyView.GetSelectedPlayable.GetCharacter.IsValid),Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start')))]"
}

template SD_button_standard_edit_family_icon {
	#visible = "[And( ShouldPromptForRulerDesigner, LobbyView.CanTryStartRulerDesigning( Character.Self ) )]"
	#visible = "[And( ShouldPromptForRulerDesigner, And(GetScriptedGui('spouse_designer_playable').IsValid( GuiScope.SetRoot( Character.MakeScope ).End),Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))) )]"
	visible = "[And( ShouldPromptForRulerDesigner,And(And(Or(Not(GetVariableSystem.Exists('spouse_designer_family')), GetVariableSystem.HasValue('spouse_designer_family', 'false' )), LobbyView.GetSelectedPlayable.GetCharacter.IsValid),Or(Not(HasGameStartedForTheFirstTime),AccessGameRules.HasRuleWithFlag('asd_edit_game_after_start'))))]"
}